function [sdLst,evtLst,majorityEvt0] = majorCurveFilter2(datOrg,dF,sdLst,evtLst,majorityEvt0,opts)
    [H,W,L,T] = size(datOrg);
    isGood = se.curveTestForMajority(datOrg,sdLst,evtLst,majorityEvt0,opts);
    majorityEvt0 = majorityEvt0(isGood);
    sdLst = sdLst(isGood);

    opts.spaSmo = 3;
    for t = 1:T
        dF(:,:,:,t) = -imgaussfilt3(dF(:,:,:,t),opts.spaSmo);% spatial smoothing for weakening gap in spatial
    end

    Map = zeros(size(datOrg),'uint16');
    for i = 1:numel(evtLst)
        Map(evtLst{i}) = i;
    end
    dF(Map==0) = -inf;
    datVec = reshape(datOrg,[],T);
    [dx,dy,dz,dt] = se.dirGenerate(80);

    % update
    for i = 1:numel(evtLst)
        [ih,iw,il,it] = ind2sub([H,W,L,T],sdLst{i});
        t00 = min(it);
        t11 = max(it); 

        pix = evtLst{i};
        [ih,iw,il,it] = ind2sub([H,W,L,T],pix);
        select = it>=t00 & it<=t11;
        ihw = unique(sub2ind([H,W,L],ih(select),iw(select),il(select)));
        t0 = min(it); t1 = max(it);
        evtCurve = mean(datVec(ihw,:),1);

        t_scl = max(1,round((t1-t0+1)/opts.TPatch));
        curve0 = se.myResize(evtCurve,1/t_scl);
        hasPeak =  se.eventCurveSignificance(curve0,max(1,floor(t0/t_scl)),ceil(t1/t_scl),max(1,floor(t00/t_scl)),ceil(t11/t_scl),opts.sigThr);
        if hasPeak
            continue;
        end
        
        disp(i)

        evtLst{i} = [];
        Map(pix) = 0;
        grow = [];
        for k = 1:numel(dx)
            ih0 = min(H,max(1,ih + dx(k)));
            iw0 = min(W,max(1,iw + dy(k)));
            il0 = min(L,max(1,il + dz(k)));
            it0 = min(T,max(1,it + dt(k)));
            grow = [grow;sub2ind([H,W,L,T],ih0,iw0,il0,it0)];
        end
        boundary = setdiff(grow,pix);
        [intensity,id] = max(dF(boundary));
        id = Map(boundary(id));
        if ~isinf(intensity)
            evtLst{id} = [evtLst{id};pix];
            Map(pix) = id;
        end
    end
    evtLst = evtLst(isGood);
end